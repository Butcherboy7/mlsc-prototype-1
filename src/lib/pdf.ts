
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export const extractTextFromPDF = async (file: File): Promise<string> => {
  try {
    // For now, we'll use a simple text extraction method
    // In a real implementation, you'd use pdf-parse or similar
    const text = await file.text();
    
    if (text && text.trim().length > 50) {
      return text.trim();
    }
    
    // Fallback: generate content based on filename
    const fileName = file.name.toLowerCase();
    return `Content extracted from: ${file.name}\n\nThis document contains educational material that can be analyzed and summarized using AI.`;
  } catch (error) {
    console.error('Error extracting PDF text:', error);
    return `Content from: ${file.name}\n\nUnable to extract text directly. Please try with a different PDF or check if the file is text-based.`;
  }
};

export const exportToPDF = async (content: string, filename: string = 'document.pdf', isDarkMode: boolean = false) => {
  try {
    const pdf = new jsPDF();
    
    // Set colors based on mode - fix TypeScript errors by using individual values
    const textColor: [number, number, number] = isDarkMode ? [255, 255, 255] : [0, 0, 0];
    const headerColor: [number, number, number] = isDarkMode ? [100, 150, 255] : [30, 100, 200];
    const backgroundColor: [number, number, number] = isDarkMode ? [40, 40, 40] : [255, 255, 255];
    
    // Set background
    pdf.setFillColor(backgroundColor[0], backgroundColor[1], backgroundColor[2]);
    pdf.rect(0, 0, pdf.internal.pageSize.width, pdf.internal.pageSize.height, 'F');
    
    // Add header
    pdf.setFontSize(20);
    pdf.setTextColor(headerColor[0], headerColor[1], headerColor[2]);
    pdf.setFont('helvetica', 'bold');
    pdf.text(filename.replace('.pdf', ''), 15, 25);
    
    // Add branding
    pdf.setFontSize(10);
    pdf.setTextColor(150, 150, 150);
    pdf.setFont('helvetica', 'normal');
    pdf.text('Generated by Mentora', 15, 35);
    
    // Process content
    const processedContent = formatContentForPDF(content);
    
    // Add content
    pdf.setFontSize(12);
    pdf.setTextColor(textColor[0], textColor[1], textColor[2]);
    pdf.setFont('helvetica', 'normal');
    
    const lines = pdf.splitTextToSize(processedContent, 180);
    let yPosition = 50;
    
    lines.forEach((line: string) => {
      if (yPosition > 270) {
        pdf.addPage();
        pdf.setFillColor(backgroundColor[0], backgroundColor[1], backgroundColor[2]);
        pdf.rect(0, 0, pdf.internal.pageSize.width, pdf.internal.pageSize.height, 'F');
        yPosition = 20;
      }
      
      // Check for formatting
      if (line.startsWith('# ')) {
        pdf.setFontSize(16);
        pdf.setFont('helvetica', 'bold');
        pdf.setTextColor(headerColor[0], headerColor[1], headerColor[2]);
        pdf.text(line.substring(2), 15, yPosition);
        yPosition += 10;
      } else if (line.startsWith('## ')) {
        pdf.setFontSize(14);
        pdf.setFont('helvetica', 'bold');
        pdf.setTextColor(headerColor[0], headerColor[1], headerColor[2]);
        pdf.text(line.substring(3), 15, yPosition);
        yPosition += 8;
      } else if (line.startsWith('```')) {
        pdf.setFontSize(10);
        pdf.setFont('courier', 'normal');
        pdf.setTextColor(isDarkMode ? 200 : 60, isDarkMode ? 200 : 60, isDarkMode ? 200 : 60);
      } else if (line.startsWith('**') && line.endsWith('**')) {
        pdf.setFont('helvetica', 'bold');
        pdf.setTextColor(textColor[0], textColor[1], textColor[2]);
        pdf.text(line.replace(/\*\*/g, ''), 15, yPosition);
        yPosition += 6;
      } else {
        pdf.setFontSize(12);
        pdf.setFont('helvetica', 'normal');
        pdf.setTextColor(textColor[0], textColor[1], textColor[2]);
        pdf.text(line, 15, yPosition);
        yPosition += 6;
      }
    });
    
    // Add footer
    pdf.setFontSize(8);
    pdf.setTextColor(100, 100, 100);
    pdf.text('Generated by Mentora AI Study Companion', 15, pdf.internal.pageSize.height - 10);
    
    pdf.save(filename);
  } catch (error) {
    console.error('Error exporting PDF:', error);
    // Fallback: download as text file
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename.replace('.pdf', '.txt');
    a.click();
    URL.revokeObjectURL(url);
  }
};

const formatContentForPDF = (content: string): string => {
  return content
    .replace(/\*\*(.*?)\*\*/g, '**$1**') // Keep bold markers
    .replace(/#{1,3}\s/g, '# ') // Normalize headers
    .replace(/```[\s\S]*?```/g, (match) => `\n${match}\n`) // Format code blocks
    .replace(/•/g, '• ') // Format bullet points
    .replace(/\n{3,}/g, '\n\n'); // Normalize spacing
};
